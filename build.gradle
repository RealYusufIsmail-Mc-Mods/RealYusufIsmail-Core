plugins {
    id 'java'
    id 'eclipse'
    id "com.diffplug.spotless" version "6.6.1"
    id 'net.minecraftforge.gradle' version '5.1.+'
}

ext {
    dev_id = 'yusuf'
    dev_name = 'Yusuf Ismail'
    dev_email = 'ysufgamer222@gmail.com'
    dev_organization = 'Real Yusuf Ismail'
    dev_organizationUrl = 'https://github.com/RealYusufIsmail/RealYusufIsmail-Core'

    gpl_name = 'BSD 3-Clause "New" or "Revised" License'
    gpl_url = 'https://github.com/RealYusufIsmail/RealYusufIsmail-Core/blob/1.19.1/LICENSE.txt'

    // Make sure we have a default for initial configuration evaluation
    isReleaseVersion = false
}

apply plugin: 'maven-publish'
apply plugin: 'signing'


version = '1.19-1.0.3'
group = 'io.github.realyusufismail'
archivesBaseName = 'realyusufismailcore'
description = "RealYusuf Ismail's Core. The main library for all my Minecraft mod."


// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: '1.19'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.25'
    //Logger
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.0'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.4'
    //test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
}

test {
    useJUnitPlatform()
}


configurations.all {
    //noinspection GrUnresolvedAccess
    // ez vulnerability fix
    exclude group: "org.slf4j", module: "slf4j-log4j12"
}

afterEvaluate { project ->
    ext.isReleaseVersion = !version.endsWith("RELEASE")
}

compileJava {
    // Makes spotlessApply task run on every compile/build.
    dependsOn 'spotlessApply'

    // Nails the Java-Version of every Subproject
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

spotless {
    java {
        // Excludes build folder since it contains generated java classes.
        targetExclude("build/**")
        eclipse('4.19.0').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifactId = project.artifactId // or maybe archiveBaseName?
            from components.java
            pom {
                name = project.archivesBaseName
                description = project.description
                url = "https://github.com/RealYusufIsmail/RealYusufIsmail-Core"
                packaging = "jar"

                licenses {
                    license {
                        name = "${gpl_name}"
                        url = "${gpl_url}"
                    }
                }
                developers {
                    developer {
                        id = "${dev_id}"
                        name = "${dev_name}"
                        email = "${dev_email}"
                        organization = "${dev_organization}"
                        organizationUrl = "${dev_organizationUrl}"
                    }
                }
                scm {
                    connection = 'https://github.com/RealYusufIsmail/RealYusufIsmail-Core.git'
                    developerConnection = 'scm:git:ssh://git@github.com/RealYusufIsmail/RealYusufIsmail-Core.git'
                    url = 'github.com/RealYusufIsmail/RealYusufIsmail-Core'
                }
            }
        }
    }
    repositories {
        maven {
            afterEvaluate { project ->
                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = (isReleaseVersion) ? releaseRepo : snapshotRepo

                //println "repos: " + version
                //println "repos: " + isReleaseVersion
                //println url

                credentials {
                    username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                    password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
                }
            }
        }
    }
}
signing {
    afterEvaluate { project ->
        //println "sign: " + version
        //println "sign: " + isReleaseVersion
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
