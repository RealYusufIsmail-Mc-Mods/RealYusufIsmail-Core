buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'maven'
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
    jcenter()
}
version = '1.0'
group = 'net.yusuf.realyusufismailcore' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'realyusufismailcore'
java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'realyusufismailcore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                realyusufismailcore {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    def gpr_creds = {
        username = property('gpr.username')
        password = property('gpr.token')
    }
    dependencies {
        minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'

    }
    jar {
        manifest {
            attributes(["Specification-Title"     : project.mod_id,
                        "Specification-Vendor"    : "RealYusufIsmail",
                        "Specification-Version"   : "1",
                        "Implementation-Title"    : project.name,
                        "Implementation-Version"  : "${version}",
                        "Implementation-Vendor"   : "RealYusufIsmail",
                        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
        }
        from {
            configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.getDestinationDir()
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }



    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/realyusufismail/${project.repoName}")
                credentials {
                    username = property('gpr.username')
                    password = property('gpr.token')
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }


        def fullVersion = outStream.toString().trim()
        def matcher = fullVersion =~ /(\d+).(\d+).(\d+)-(.*)/

        def maj = matcher[0][1]
        def min = matcher[0][2]
        def rev = matcher[0][3]
        def bn = getBuildNumber()

        return makeVersionMap(maj, min, rev, bn, matcher[0][4])
    }

    def makeVersionMap(maj, min, rev, bn, githash) {
        def out = [:]
        out['build.major.number'] = maj.toString()
        out['build.minor.number'] = min.toString()
        out['build.revision.number'] = rev.toString()
        out['build.githash'] = githash
        out['build.number'] = bn.toString()
        out['version_short'] = "${maj}.${min}.${rev}".toString()
        out['version'] = "${project.mc_version}-${maj}.${min}.${rev}".toString()
        return out
    }

// Modified old version getter
    def getVersion(String type, String mod_file) {
        String maj = '0'
        String min = '0'
        String rev = '0'
        String bn = getBuildNumber()

        File file = file(mod_file)
        def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
        file.eachLine { String s ->
            s = s.trim()
            if (s ==~ prefix || prefix.matcher(s).matches()) {
                String[] bits = s.split("=")
                String interesting = bits[1].trim()
                interesting = interesting.substring(1, interesting.length() - 2)
                String[] pts = interesting.trim().split("\\.")

                maj = pts[0] ?: '0'
                min = pts[1] ?: '0'
                rev = pts[2] ?: '0'
            }
        }

        return makeVersionMap(maj, min, rev, bn, 'unknown')
    }

// Used by old getVersion
    String getModFile() {
        String path = ''
        FileTree tree = fileTree(dir: 'src/main/java')
        tree.include '**/*.java'
        tree.visit { element ->
            if (element.file.isFile()) {
                element.file.eachLine { String s ->
                    s = s.trim()
                    if (s.startsWith('@Mod(')) {
                        path = "src/main/java/$element.relativePath"
                    }
                }
            }
        }
        return path
    }

// Build number tracking

    String getBuildNumber() {
        def versionFile = file('version.properties')
        if (versionFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionFile))
            return versionProps['build_num'].toString()
        }
        return "1"
    }

    task incrementBuild {
        doFirst {
            def versionFile = file('version.properties')
            if (versionFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionFile))
                def num = versionProps['build_num'].toInteger() + 1
                println("incrementing BuildNumber to: " + num)
                versionProps['build_num'] = num.toString()
                versionProps.store(versionFile.newWriter(), null)
            } else {
                println("version.properties file not found! Ignoring.")
            }
        }
    }

build.finalizedBy incrementBuild // only increment on successful builds
